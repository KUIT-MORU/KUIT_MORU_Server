services:
  redis:
    image: redis:6.2-alpine
    # container_name: redis-dev   # ← 제거 (충돌 방지)
    # 내부 통신만 사용: 호스트 포트 공개 X
    # ports:
    #   - "6379:6379"
    networks:
      - temp
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  back:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    restart: always
    # 디버깅 필요 없으면 아래 포트 맵핑도 지울 수 있음
    ports:
      - "8000:8000"
    environment:
      TZ: Asia/Seoul
      SPRING_PROFILES_ACTIVE: "dev"

      # MySQL
      SPRING_DATASOURCE_URL: >
        jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}
        ?useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: "${MYSQL_USERNAME}"
      SPRING_DATASOURCE_PASSWORD: "${MYSQL_PASSWORD}"

      # Redis - 서비스명으로 접속
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

      # AWS
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      SPRING_CLOUD_AWS_REGION_STATIC: "${AWS_REGION}"

      # JWT
      JWT_SECRET: "${JWT_SECRET}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      temp:
        aliases:
          - back

  nginx:
    image: nginx:stable-alpine
    # container_name: nginx-dev   # ← 제거 (충돌 방지)
    depends_on:
      - back
    # 80/443 충돌 피하기 위해 호스트 8080/8443 사용
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs/ip.crt:/etc/ssl/certs/ip.crt:ro
      - ./certs/ip.key:/etc/ssl/private/ip.key:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - temp

networks:
  temp:
    driver: bridge
    attachable: true
