server:
  port: 8000

spring:
  # 'dev' 프로필을 활성화하여 DummyDataInitializer가 실행되도록 합니다.
  profiles:
    active: dev 

  devtools:
    restart:
      enabled: false # 이 설정을 추가하여 자동 재시작을 비활성화
  main:
    allow-bean-definition-overriding: true
  datasource:
    url: jdbc:mysql://localhost:3306/moru_db
    username: root
    password: spring12!    # 비밀번호 없으면 이대로 둬도 됨
    driver-class-name: com.mysql.cj.jdbc.Driver
  security:
    user:
      name: user
      password: $2a$10$SUKPX4PRaPeNnPjG8r7oJOoPrDGFw4SwQTk/sGz.js2NkaljfIkAi
  jpa:
    hibernate:
      ddl-auto: update   # 개발 중에는 update / 운영 시에는 validate 권장
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        # 아래 3줄을 추가하여 배치 처리를 활성화합니다.
        # 1000개의 INSERT/UPDATE 쿼리를 모아서 한 번에 전송합니다.
        jdbc.batch_size: 100
        # INSERT 쿼리를 최적화하기 위해 순서를 정렬합니다.
        order_inserts: true
        # UPDATE 쿼리를 최적화하기 위해 순서를 정렬합니다.
        order_updates: true
  data:
    redis:
      host: localhost
      port: 6379
  cloud:
    aws:
      region:
        static: ${AWS_REGION}
      credentials:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      s3:
        bucket: moru-image-bucket
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 10MB

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha

jwt:
  secret: ${JWT_SECRET}
fcm:
  service-account-file: firebase/firebase-service-account.json

dummy:
  data:
    user-count: 10000
    routine-count: 20000
    follow-count: 100000
    favorite-tag-count: 30000

moru:
  routine:
    recommend:
      hot-score:
        view-weight: 0.5
        like-weight: 0.5
      similar-fetch-size: 20
      similar-limit-size: 10

